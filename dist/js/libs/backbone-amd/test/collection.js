!function(){var e,t,n,o,a,l,i;module("Backbone.Collection",{setup:function(){e=new Backbone.Model({id:3,label:"a"}),t=new Backbone.Model({id:2,label:"b"}),n=new Backbone.Model({id:1,label:"c"}),o=new Backbone.Model({id:0,label:"d"}),a=null,l=new Backbone.Collection([e,t,n,o]),i=new Backbone.Collection}}),test("new and sort",9,function(){var t=0;l.on("sort",function(){t++}),equal(l.first(),e,"a should be first"),equal(l.last(),o,"d should be last"),l.comparator=function(e,t){return e.id>t.id?-1:1},l.sort(),equal(t,1),equal(l.first(),e,"a should be first"),equal(l.last(),o,"d should be last"),l.comparator=function(e){return e.id},l.sort(),equal(t,2),equal(l.first(),o,"d should be first"),equal(l.last(),e,"a should be last"),equal(l.length,4)}),test("String comparator.",1,function(){var e=new Backbone.Collection([{id:3},{id:1},{id:2}],{comparator:"id"});deepEqual(e.pluck("id"),[1,2,3])}),test("new and parse",3,function(){var e=Backbone.Collection.extend({parse:function(e){return _.filter(e,function(e){return e.a%2===0})}}),t=[{a:1},{a:2},{a:3},{a:4}],n=new e(t,{parse:!0});strictEqual(n.length,2),strictEqual(n.first().get("a"),2),strictEqual(n.last().get("a"),4)}),test("get",6,function(){equal(l.get(0),o),equal(l.get(o.clone()),o),equal(l.get(2),t),equal(l.get({id:1}),n),equal(l.get(n.clone()),n),equal(l.get(l.first().cid),l.first())}),test("get with non-default ids",5,function(){var e=new Backbone.Collection,t=Backbone.Model.extend({idAttribute:"_id"}),n=new t({_id:100});e.add(n),equal(e.get(100),n),equal(e.get(n.cid),n),equal(e.get(n),n),equal(e.get(101),void 0);var o=new Backbone.Collection;o.model=t,o.add(n.attributes),equal(o.get(n.clone()),o.first())}),test("update index when id changes",4,function(){var e=new Backbone.Collection;e.add([{id:0,name:"one"},{id:1,name:"two"}]);var t=e.get(0);equal(t.get("name"),"one"),e.on("change:name",function(e){ok(this.get(e))}),t.set({name:"dalmatians",id:101}),equal(e.get(0),null),equal(e.get(101).get("name"),"dalmatians")}),test("at",1,function(){equal(l.at(2),n)}),test("pluck",1,function(){equal(l.pluck("label").join(" "),"a b c d")}),test("add",10,function(){var e,t,n;e=t=n=null,a=new Backbone.Model({id:10,label:"e"}),i.add(a),i.on("add",function(){n=!0}),l.on("add",function(n,o,a){e=n.get("label"),t=a}),l.add(a,{amazing:!0}),equal(e,"e"),equal(l.length,5),equal(l.last(),a),equal(i.length,1),equal(n,null),ok(t.amazing);var o=new Backbone.Model({id:20,label:"f"}),d=new Backbone.Model({id:21,label:"g"}),c=new Backbone.Model({id:22,label:"h"}),r=new Backbone.Collection([o,d,c]);equal(r.length,3),r.add(a,{at:1}),equal(r.length,4),equal(r.at(1),a),equal(r.last(),c)}),test("add multiple models",6,function(){var e=new Backbone.Collection([{at:0},{at:1},{at:9}]);e.add([{at:2},{at:3},{at:4},{at:5},{at:6},{at:7},{at:8}],{at:2});for(var t=0;5>=t;t++)equal(e.at(t).get("at"),t)}),test("add; at should have preference over comparator",1,function(){var e=Backbone.Collection.extend({comparator:function(e,t){return e.id>t.id?-1:1}}),t=new e([{id:2},{id:3}]);t.add(new Backbone.Model({id:1}),{at:1}),equal(t.pluck("id").join(" "),"3 1 2")}),test("can't add model to collection twice",function(){var e=new Backbone.Collection([{id:1},{id:2},{id:1},{id:2},{id:3}]);equal(e.pluck("id").join(" "),"1 2 3")}),test("can't add different model with same id to collection twice",1,function(){var e=new Backbone.Collection;e.unshift({id:101}),e.add({id:101}),equal(e.length,1)}),test("merge in duplicate models with {merge: true}",3,function(){var e=new Backbone.Collection;e.add([{id:1,name:"Moe"},{id:2,name:"Curly"},{id:3,name:"Larry"}]),e.add({id:1,name:"Moses"}),equal(e.first().get("name"),"Moe"),e.add({id:1,name:"Moses"},{merge:!0}),equal(e.first().get("name"),"Moses"),e.add({id:1,name:"Tim"},{merge:!0,silent:!0}),equal(e.first().get("name"),"Tim")}),test("add model to multiple collections",10,function(){var e=0,t=new Backbone.Model({id:10,label:"e"});t.on("add",function(a,l){e++,equal(t,a),e>1?equal(l,o):equal(l,n)});var n=new Backbone.Collection([]);n.on("add",function(e,o){equal(t,e),equal(n,o)});var o=new Backbone.Collection([]);o.on("add",function(e,n){equal(t,e),equal(o,n)}),n.add(t),equal(t.collection,n),o.add(t),equal(t.collection,n)}),test("add model with parse",1,function(){var e=Backbone.Model.extend({parse:function(e){return e.value+=1,e}}),t=Backbone.Collection.extend({model:e}),n=new t;n.add({value:1},{parse:!0}),equal(n.at(0).get("value"),2)}),test("add with parse and merge",function(){var e=new Backbone.Collection;e.parse=function(e){return _.map(e,function(e){return e.model?e.model:e})},e.add({id:1}),e.add({model:{id:1,name:"Alf"}},{parse:!0,merge:!0}),equal(e.first().get("name"),"Alf")}),test("add model to collection with sort()-style comparator",3,function(){var e=new Backbone.Collection;e.comparator=function(e,t){return e.get("name")<t.get("name")?-1:1};var t=new Backbone.Model({name:"Tom"}),n=new Backbone.Model({name:"Rob"}),o=new Backbone.Model({name:"Tim"});e.add(t),e.add(n),e.add(o),equal(e.indexOf(n),0),equal(e.indexOf(o),1),equal(e.indexOf(t),2)}),test("comparator that depends on `this`",2,function(){var e=new Backbone.Collection;e.negative=function(e){return-e},e.comparator=function(e){return this.negative(e.id)},e.add([{id:1},{id:2},{id:3}]),deepEqual(e.pluck("id"),[3,2,1]),e.comparator=function(e,t){return this.negative(t.id)-this.negative(e.id)},e.sort(),deepEqual(e.pluck("id"),[1,2,3])}),test("remove",5,function(){var t=null,n=null;l.on("remove",function(e,n,o){t=e.get("label"),equal(o.index,3)}),i.on("remove",function(e,t,o){n=!0}),l.remove(o),equal(t,"d"),equal(l.length,3),equal(l.first(),e),equal(n,null)}),test("add and remove return values",13,function(){var e=Backbone.Model.extend({validate:function(e){return e.id%2!==0?"odd":void 0}}),t=new Backbone.Collection;t.model=e;var n=t.add([{id:2},{id:4}],{validate:!0});equal(n.length,2),ok(n[0]instanceof Backbone.Model),equal(n[1],t.last()),equal(n[1].get("id"),4),n=t.add([{id:3},{id:6}],{validate:!0}),equal(t.length,3),equal(n[0],!1),equal(n[1].get("id"),6);var o=t.add({id:6});equal(o.cid,n[1].cid),o=t.remove({id:6}),equal(t.length,2),equal(o.id,6),n=t.remove([{id:2},{id:8}]),equal(t.length,1),equal(n[0].get("id"),2),equal(n[1],null)}),test("shift and pop",2,function(){var e=new Backbone.Collection([{a:"a"},{b:"b"},{c:"c"}]);equal(e.shift().get("a"),"a"),equal(e.pop().get("c"),"c")}),test("slice",2,function(){var e=new Backbone.Collection([{a:"a"},{b:"b"},{c:"c"}]),t=e.slice(1,3);equal(t.length,2),equal(t[0].get("b"),"b")}),test("events are unbound on remove",3,function(){var e=0,t=new Backbone.Model,n=new Backbone.Collection([t]);n.on("change",function(){e++}),t.set({name:"Kool"}),equal(e,1),n.reset([]),equal(t.collection,void 0),t.set({name:"Shadow"}),equal(e,1)}),test("remove in multiple collections",7,function(){var e={id:5,title:"Othello"},t=!1,n=new Backbone.Model(e),o=new Backbone.Model(e);o.on("remove",function(){t=!0});var a=new Backbone.Collection([n]),l=new Backbone.Collection([o]);ok(n!=o),ok(1===a.length),ok(1===l.length),a.remove(n),equal(t,!1),ok(0===a.length),l.remove(n),ok(0===l.length),equal(t,!0)}),test("remove same model in multiple collection",16,function(){var e=0,t=new Backbone.Model({id:5,title:"Othello"});t.on("remove",function(a,l){e++,equal(t,a),e>1?equal(l,n):equal(l,o)});var n=new Backbone.Collection([t]);n.on("remove",function(e,o){equal(t,e),equal(n,o)});var o=new Backbone.Collection([t]);o.on("remove",function(e,n){equal(t,e),equal(o,n)}),equal(n,t.collection),o.remove(t),ok(0===o.length),ok(1===n.length),equal(e,1),equal(n,t.collection),n.remove(t),equal(null,t.collection),ok(0===n.length),equal(e,2)}),test("model destroy removes from all collections",3,function(){var e=new Backbone.Model({id:5,title:"Othello"});e.sync=function(e,t,n){n.success()};var t=new Backbone.Collection([e]),n=new Backbone.Collection([e]);e.destroy(),ok(0===t.length),ok(0===n.length),equal(void 0,e.collection)}),test("Colllection: non-persisted model destroy removes from all collections",3,function(){var e=new Backbone.Model({title:"Othello"});e.sync=function(e,t,n){throw"should not be called"};var t=new Backbone.Collection([e]),n=new Backbone.Collection([e]);e.destroy(),ok(0===t.length),ok(0===n.length),equal(void 0,e.collection)}),test("fetch",4,function(){var e=new Backbone.Collection;e.url="/test",e.fetch(),equal(this.syncArgs.method,"read"),equal(this.syncArgs.model,e),equal(this.syncArgs.options.parse,!0),e.fetch({parse:!1}),equal(this.syncArgs.options.parse,!1)}),test("fetch with an error response triggers an error event",1,function(){var e=new Backbone.Collection;e.on("error",function(){ok(!0)}),e.sync=function(e,t,n){n.error()},e.fetch()}),test("ensure fetch only parses once",1,function(){var e=new Backbone.Collection,t=0;e.parse=function(e){return t++,e},e.url="/test",e.fetch(),this.syncArgs.options.success(),equal(t,1)}),test("create",4,function(){var e=new Backbone.Collection;e.url="/test";var t=e.create({label:"f"},{wait:!0});equal(this.syncArgs.method,"create"),equal(this.syncArgs.model,t),equal(t.get("label"),"f"),equal(t.collection,e)}),test("create with validate:true enforces validation",3,function(){var e=Backbone.Model.extend({validate:function(e){return"fail"}}),t=Backbone.Collection.extend({model:e}),n=new t;n.on("invalid",function(e,t,n){equal(t,"fail"),equal(n.validationError,"fail")}),equal(n.create({foo:"bar"},{validate:!0}),!1)}),test("a failing create returns model with errors",function(){var e=Backbone.Model.extend({validate:function(e){return"fail"}}),t=Backbone.Collection.extend({model:e}),n=new t,o=n.create({foo:"bar"});equal(o.validationError,"fail"),equal(n.length,1)}),test("initialize",1,function(){var e=Backbone.Collection.extend({initialize:function(){this.one=1}}),t=new e;equal(t.one,1)}),test("toJSON",1,function(){equal(JSON.stringify(l),'[{"id":3,"label":"a"},{"id":2,"label":"b"},{"id":1,"label":"c"},{"id":0,"label":"d"}]')}),test("where and findWhere",8,function(){var e=new Backbone.Model({a:1}),t=new Backbone.Collection([e,{a:1},{a:1,b:2},{a:2,b:2},{a:3}]);equal(t.where({a:1}).length,3),equal(t.where({a:2}).length,1),equal(t.where({a:3}).length,1),equal(t.where({b:1}).length,0),equal(t.where({b:2}).length,2),equal(t.where({a:1,b:2}).length,1),equal(t.findWhere({a:1}),e),equal(t.findWhere({a:4}),void 0)}),test("Underscore methods",14,function(){equal(l.map(function(e){return e.get("label")}).join(" "),"a b c d"),equal(l.any(function(e){return 100===e.id}),!1),equal(l.any(function(e){return 0===e.id}),!0),equal(l.indexOf(t),1),equal(l.size(),4),equal(l.rest().length,3),ok(!_.include(l.rest(),e)),ok(_.include(l.rest(),o)),ok(!l.isEmpty()),ok(!_.include(l.without(o),o)),equal(l.max(function(e){return e.id}).id,3),equal(l.min(function(e){return e.id}).id,0),deepEqual(l.chain().filter(function(e){return e.id%2===0}).map(function(e){return 2*e.id}).value(),[4,0]),deepEqual(l.difference([n,o]),[e,t])}),test("reset",12,function(){var e=0,t=l.models;l.on("reset",function(){e+=1}),l.reset([]),equal(e,1),equal(l.length,0),equal(l.last(),null),l.reset(t),equal(e,2),equal(l.length,4),equal(l.last(),o),l.reset(_.map(t,function(e){return e.attributes})),equal(e,3),equal(l.length,4),ok(l.last()!==o),ok(_.isEqual(l.last().attributes,o.attributes)),l.reset(),equal(l.length,0),equal(e,4)}),test("reset with different values",function(){var e=new Backbone.Collection({id:1});e.reset({id:1,a:1}),equal(e.get(1).get("a"),1)}),test("same references in reset",function(){var e=new Backbone.Model({id:1}),t=new Backbone.Collection({id:1});t.reset(e),equal(t.get(1),e)}),test("reset passes caller options",3,function(){var e=Backbone.Model.extend({initialize:function(e,t){this.model_parameter=t.model_parameter}}),t=new(Backbone.Collection.extend({model:e}));t.reset([{astring:"green",anumber:1},{astring:"blue",anumber:2}],{model_parameter:"model parameter"}),equal(t.length,2),t.each(function(e){equal(e.model_parameter,"model parameter")})}),test("trigger custom events on models",1,function(){var t=null;e.on("custom",function(){t=!0}),e.trigger("custom"),equal(t,!0)}),test("add does not alter arguments",2,function(){var e={},t=[e];(new Backbone.Collection).add(t),equal(t.length,1),ok(e===t[0])}),test("#714: access `model.collection` in a brand new model.",2,function(){var e=new Backbone.Collection;e.url="/test";var t=Backbone.Model.extend({set:function(t){return equal(t.prop,"value"),equal(this.collection,e),this}});e.model=t,e.create({prop:"value"})}),test("#574, remove its own reference to the .models array.",2,function(){var e=new Backbone.Collection([{id:1},{id:2},{id:3},{id:4},{id:5},{id:6}]);equal(e.length,6),e.remove(e.models),equal(e.length,0)}),test("#861, adding models to a collection which do not pass validation, with validate:true",function(){var e=Backbone.Model.extend({validate:function(e){return 3==e.id?"id can't be 3":void 0}}),t=Backbone.Collection.extend({model:e}),n=new t;n.on("error",function(){ok(!0)}),n.add([{id:1},{id:2},{id:3},{id:4},{id:5},{id:6}],{validate:!0}),deepEqual(n.pluck("id"),[1,2,4,5,6])}),test("Invalid models are discarded with validate:true.",5,function(){var e=new Backbone.Collection;e.on("test",function(){ok(!0)}),e.model=Backbone.Model.extend({validate:function(e){return e.valid?void 0:"invalid"}});var t=new e.model({id:1,valid:!0});e.add([t,{id:2}],{validate:!0}),t.trigger("test"),ok(e.get(t.cid)),ok(e.get(1)),ok(!e.get(2)),equal(e.length,1)}),test("multiple copies of the same model",3,function(){var e=new Backbone.Collection,t=new Backbone.Model;e.add([t,t]),equal(e.length,1),e.add([{id:1},{id:1}]),equal(e.length,2),equal(e.last().id,1)}),test("#964 - collection.get return inconsistent",2,function(){var e=new Backbone.Collection;ok(void 0===e.get(null)),ok(void 0===e.get())}),test("#1112 - passing options.model sets collection.model",2,function(){var e=Backbone.Model.extend({}),t=new Backbone.Collection([{id:1}],{model:e});ok(t.model===e),ok(t.at(0)instanceof e)}),test("null and undefined are invalid ids.",2,function(){var e=new Backbone.Model({id:1}),t=new Backbone.Collection([e]);e.set({id:null}),ok(!t.get("null")),e.set({id:1}),e.set({id:void 0}),ok(!t.get("undefined"))}),test("falsy comparator",4,function(){var e=Backbone.Collection.extend({comparator:function(e){return e.id}}),t=new e,n=new e(null,{comparator:!1}),o=new e(null,{comparator:null}),a=new e(null,{comparator:void 0});ok(t.comparator),ok(!n.comparator),ok(!o.comparator),ok(a.comparator)}),test("#1355 - `options` is passed to success callbacks",2,function(){var e=new Backbone.Model({x:1}),t=new Backbone.Collection,n={success:function(e,t,n){ok(n)}};t.sync=e.sync=function(e,t,n){n.success(t,[],n)},t.fetch(n),t.create(e,n)}),test("#1412 - Trigger 'request' and 'sync' events.",4,function(){var e=new Backbone.Collection;e.url="/test",Backbone.ajax=function(e){e.success()},e.on("request",function(t,n,o){ok(t===e,"collection has correct 'request' event after fetching")}),e.on("sync",function(t,n,o){ok(t===e,"collection has correct 'sync' event after fetching")}),e.fetch(),e.off(),e.on("request",function(t,n,o){ok(t===e.get(1),"collection has correct 'request' event after one of its models save")}),e.on("sync",function(t,n,o){ok(t===e.get(1),"collection has correct 'sync' event after one of its models save")}),e.create({id:1}),e.off()}),test("#1447 - create with wait adds model.",1,function(){var e=new Backbone.Collection,t=new Backbone.Model;t.sync=function(e,t,n){n.success()},e.on("add",function(){ok(!0)}),e.create(t,{wait:!0})}),test("#1448 - add sorts collection after merge.",1,function(){var e=new Backbone.Collection([{id:1,x:1},{id:2,x:2}]);e.comparator=function(e){return e.get("x")},e.add({id:1,x:3},{merge:!0}),deepEqual(e.pluck("id"),[2,1])}),test("#1655 - groupBy can be used with a string argument.",3,function(){var e=new Backbone.Collection([{x:1},{x:2}]),t=e.groupBy("x");strictEqual(_.keys(t).length,2),strictEqual(t[1][0].get("x"),1),strictEqual(t[2][0].get("x"),2)}),test("#1655 - sortBy can be used with a string argument.",1,function(){var e=new Backbone.Collection([{x:3},{x:1},{x:2}]),t=_.map(e.sortBy("x"),function(e){return e.get("x")});deepEqual(t,[1,2,3])}),test("#1604 - Removal during iteration.",0,function(){var e=new Backbone.Collection([{},{}]);e.on("add",function(){e.at(0).destroy()}),e.add({},{at:0})}),test("#1638 - `sort` during `add` triggers correctly.",function(){var e=new Backbone.Collection;e.comparator=function(e){return e.get("x")};var t=[];e.on("add",function(n){n.set({x:3}),e.sort(),t.push(n.id)}),e.add([{id:1,x:1},{id:2,x:2}]),deepEqual(t,[1,2])}),test("fetch parses models by default",1,function(){var e={},t=Backbone.Collection.extend({url:"test",model:Backbone.Model.extend({parse:function(t){strictEqual(t,e)}})});(new t).fetch(),this.ajaxSettings.success([e])}),test("`sort` shouldn't always fire on `add`",1,function(){var e=new Backbone.Collection([{id:1},{id:2},{id:3}],{comparator:"id"});e.sort=function(){ok(!0)},e.add([]),e.add({id:1}),e.add([{id:2},{id:3}]),e.add({id:4})}),test("#1407 parse option on constructor parses collection and models",2,function(){var e={namespace:[{id:1},{id:2}]},t=Backbone.Collection.extend({model:Backbone.Model.extend({parse:function(e){return e.name="test",e}}),parse:function(e){return e.namespace}}),n=new t(e,{parse:!0});equal(n.length,2),equal(n.at(0).get("name"),"test")}),test("#1407 parse option on reset parses collection and models",2,function(){var e={namespace:[{id:1},{id:2}]},t=Backbone.Collection.extend({model:Backbone.Model.extend({parse:function(e){return e.name="test",e}}),parse:function(e){return e.namespace}}),n=new t;n.reset(e,{parse:!0}),equal(n.length,2),equal(n.at(0).get("name"),"test")}),test("Reset includes previous models in triggered event.",1,function(){var e=new Backbone.Model,t=new Backbone.Collection([e]).on("reset",function(t,n){deepEqual(n.previousModels,[e])});t.reset([])}),test("set",function(){var e=new Backbone.Model,t=new Backbone.Model({id:2}),n=new Backbone.Model,o=new Backbone.Collection([e,t]);o.on("add",function(e){strictEqual(e,n)}),o.on("change",function(e){strictEqual(e,t)}),o.on("remove",function(t){strictEqual(t,e)}),o.set([],{remove:!1}),strictEqual(o.length,2),o.set([e,t,n],{add:!1}),strictEqual(o.length,2),o.set([e,{id:2,a:1}],{merge:!1}),strictEqual(t.get("a"),void 0),o.set([e,{id:2,a:0},n,{id:4}],{add:!1,remove:!1}),strictEqual(o.length,2),strictEqual(t.get("a"),0),o.set([{id:2,a:1},n]),strictEqual(o.length,2),strictEqual(t.get("a"),1),o.off("remove").on("remove",function(e){ok(e===t||e===n)}),o.set([]),strictEqual(o.length,0)}),test("set with many models does not overflow the stack",function(){for(var e=15e4,t=new Backbone.Collection,n=[],o=0;e>o;o++)n.push({id:o});t.set(n),equal(t.length,e),t.reset(),t.set(n,{at:0}),equal(t.length,e)}),test("set with only cids",3,function(){var e=new Backbone.Model,t=new Backbone.Model,n=new Backbone.Collection;n.set([e,t]),equal(n.length,2),n.set([e]),equal(n.length,1),n.set([e,e,e,t,t],{remove:!1}),equal(n.length,2)}),test("set with only idAttribute",3,function(){var e={_id:1},t={_id:2},n=Backbone.Collection.extend({model:Backbone.Model.extend({idAttribute:"_id"})}),o=new n;o.set([e,t]),equal(o.length,2),o.set([e]),equal(o.length,1),o.set([e,e,e,t,t],{remove:!1}),equal(o.length,2)}),test("set + merge with default values defined",function(){var e=Backbone.Model.extend({defaults:{key:"value"}}),t=new e({id:1}),n=new Backbone.Collection([t],{model:e});equal(n.first().get("key"),"value"),n.set({id:1,key:"other"}),equal(n.first().get("key"),"other"),n.set({id:1,other:"value"}),equal(n.first().get("key"),"other"),equal(n.length,1)}),test("merge without mutation",function(){var e=Backbone.Model.extend({initialize:function(t,n){t.child&&this.set("child",new e(t.child,n),n)}}),t=Backbone.Collection.extend({model:e}),n=[{id:1,child:{id:2}}],o=new t(n);equal(o.first().id,1),o.set(n),equal(o.first().id,1),o.set([{id:2,child:{id:2}}].concat(n)),deepEqual(o.pluck("id"),[2,1])}),test("`set` and model level `parse`",function(){var e=Backbone.Model.extend({}),t=Backbone.Collection.extend({model:e,parse:function(e){return _.pluck(e.models,"model")}}),n=new e({id:1}),o=new t(n);o.set({models:[{model:{id:1}},{model:{id:2}}]},{parse:!0}),equal(o.first(),n)}),test("`set` data is only parsed once",function(){var e=new Backbone.Collection;e.model=Backbone.Model.extend({parse:function(e){return equal(e.parsed,void 0),e.parsed=!0,e}}),e.set({},{parse:!0})}),test("`set` matches input order in the absence of a comparator",function(){var e=new Backbone.Model({id:1}),t=new Backbone.Model({id:2}),n=new Backbone.Model({id:3}),o=new Backbone.Collection([e,t,n]);o.set([{id:3},{id:2},{id:1}]),deepEqual(o.models,[n,t,e]),o.set([{id:1},{id:2}]),deepEqual(o.models,[e,t]),o.set([t,n,e]),deepEqual(o.models,[t,n,e]),o.set([{id:1},{id:2}],{remove:!1}),deepEqual(o.models,[t,n,e]),o.set([{id:1},{id:2},{id:3}],{merge:!1}),deepEqual(o.models,[e,t,n]),o.set([n,t,e,{id:4}],{add:!1}),deepEqual(o.models,[e,t,n])}),test("#1894 - Push should not trigger a sort",0,function(){var e=Backbone.Collection.extend({comparator:"id",sort:function(){ok(!1)}});(new e).push({id:1})}),test("#2428 - push duplicate models, return the correct one",1,function(){var e=new Backbone.Collection,t=e.push({id:101}),n=e.push({id:101});ok(n.cid==t.cid)}),test("`set` with non-normal id",function(){var e=Backbone.Collection.extend({model:Backbone.Model.extend({idAttribute:"_id"})}),t=new e({_id:1});t.set([{_id:1,a:1}],{add:!1}),equal(t.first().get("a"),1)}),test("#1894 - `sort` can optionally be turned off",0,function(){var e=Backbone.Collection.extend({comparator:"id",sort:function(){ok(!0)}});(new e).add({id:1},{sort:!1})}),test("#1915 - `parse` data in the right order in `set`",function(){var e=new(Backbone.Collection.extend({parse:function(e){return strictEqual(e.status,"ok"),e.data}})),t={status:"ok",data:[{id:1}]};e.set(t,{parse:!0})}),asyncTest("#1939 - `parse` is passed `options`",1,function(){var e=new(Backbone.Collection.extend({url:"/",parse:function(e,t){return strictEqual(t.xhr.someHeader,"headerValue"),e}})),t=Backbone.ajax;Backbone.ajax=function(e){return _.defer(e.success),{someHeader:"headerValue"}},e.fetch({success:function(){start()}}),Backbone.ajax=t}),test("`add` only `sort`s when necessary",2,function(){var e=new(Backbone.Collection.extend({comparator:"a"}))([{id:1},{id:2},{id:3}]);e.on("sort",function(){ok(!0)}),e.add({id:4}),e.add({id:1,a:1},{merge:!0}),e.add({id:1,b:1},{merge:!0}),e.add({id:1,a:1},{merge:!0}),e.add(e.models),e.add(e.models,{merge:!0})}),test("`add` only `sort`s when necessary with comparator function",3,function(){var e=new(Backbone.Collection.extend({comparator:function(e,t){return e.get("a")>t.get("a")?1:e.get("a")<t.get("a")?-1:0}}))([{id:1},{id:2},{id:3}]);e.on("sort",function(){ok(!0)}),e.add({id:4}),e.add({id:1,a:1},{merge:!0}),e.add({id:1,b:1},{merge:!0}),e.add({id:1,a:1},{merge:!0}),e.add(e.models),e.add(e.models,{merge:!0})}),test("Attach options to collection.",2,function(){var e=new Backbone.Model,t=function(){},n=new Backbone.Collection([],{model:e,comparator:t});ok(n.model===e),ok(n.comparator===t)}),test("`add` overrides `set` flags",function(){var e=new Backbone.Collection;e.once("add",function(e,t,n){t.add({id:2},n)}),e.set({id:1}),equal(e.length,2)}),test("#2606 - Collection#create, success arguments",1,function(){var e=new Backbone.Collection;e.url="test",e.create({},{success:function(e,t,n){strictEqual(t,"response")}}),this.ajaxSettings.success("response")}),test("#2612 - nested `parse` works with `Collection#set`",function(){var e=Backbone.Model.extend({constructor:function(){this.items=new n,Backbone.Model.apply(this,arguments)},parse:function(e){return this.items.set(e.items,{parse:!0}),_.omit(e,"items")}}),t=Backbone.Model.extend({constructor:function(){this.subItems=new Backbone.Collection,Backbone.Model.apply(this,arguments)},parse:function(e){return this.subItems.set(e.subItems,{parse:!0}),_.omit(e,"subItems")}}),n=Backbone.Collection.extend({model:t}),o={name:"JobName",id:1,items:[{id:1,name:"Sub1",subItems:[{id:1,subName:"One"},{id:2,subName:"Two"}]},{id:2,name:"Sub2",subItems:[{id:3,subName:"Three"},{id:4,subName:"Four"}]}]},a={name:"NewJobName",id:1,items:[{id:1,name:"NewSub1",subItems:[{id:1,subName:"NewOne"},{id:2,subName:"NewTwo"}]},{id:2,name:"NewSub2",subItems:[{id:3,subName:"NewThree"},{id:4,subName:"NewFour"}]}]},l=new e(o,{parse:!0});equal(l.get("name"),"JobName"),equal(l.items.at(0).get("name"),"Sub1"),equal(l.items.length,2),equal(l.items.get(1).subItems.get(1).get("subName"),"One"),equal(l.items.get(2).subItems.get(3).get("subName"),"Three"),l.set(l.parse(a,{parse:!0})),equal(l.get("name"),"NewJobName"),equal(l.items.at(0).get("name"),"NewSub1"),equal(l.items.length,2),equal(l.items.get(1).subItems.get(1).get("subName"),"NewOne"),equal(l.items.get(2).subItems.get(3).get("subName"),"NewThree")})}();